#!/bin/bash

set -euo pipefail

usage() {
  cat >&2 <<EOF
Usage: keep [OPTIONS] encrypt DIRECTORY [FILE]
       keep [OPTIONS] decrypt FILE [DIRECTORY]

Simple directory encryption using GnuPG --symmetric.

Optional arguments:
  -f, --force                Overwrite target file or directory
  -u, --remove               Remove the source after encryption/decryption
  -q, --quiet                Suppress output
  -x, --gpg-executable=PATH  Command or path to gpg binary (default: gpg)
  -h, --help                 This help text
EOF
}

_error() {
  [ $# -gt 0 ] && echo >&2 "keep: $@"
  echo >&2 "Try 'keep --help' for more information."
  exit 1
}

_gpg() {
  "$GPG_EXECUTABLE" "$@"
}

_is_termux() {
  test -f "$HOME/../usr/etc/termux-login.sh"
}

_out() {
  [ -n "$QUIET" ] || echo "$@"
}

# Fix gpg-agent on termux during symmetric encryption
_is_termux && export GPG_TTY="$(tty)"

declare {COMMAND,SOURCE,TARGET,FORCE,REMOVE,QUIET}=
GPG_EXECUTABLE=gpg

opts="$(
  getopt -n keep -o fuqx:h -l \
    force,remove,quiet,gpg-executable:,help -- "$@"
)" || _error
eval set -- $opts

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  case "$ARG" in
  -f | --force)
    FORCE=1
    ;;
  -u | --remove)
    REMOVE=1
    ;;
  -q | --quiet)
    QUIET=1
    ;;
  -x | --gpg-executable)
    GPG_EXECUTABLE="$1"
    shift
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --)
    break
    ;;
  esac
done

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  if [ -n "$TARGET" ]; then
    _error "unexpected argument '$ARG'"
  elif [ -n "$SOURCE" ]; then
    TARGET="$ARG"
  elif [ -n "$COMMAND" ]; then
    SOURCE="$ARG"
  else
    case "$ARG" in
    en*)
      COMMAND=encrypt
      ;;
    de*)
      COMMAND=decrypt
      ;;
    *)
      _error "unknown command '$ARG'"
      ;;
    esac
  fi
done

if [ -z "$COMMAND" ]; then
  _error "expected 'encrypt' or 'decrypt' argument"
fi

if [ $COMMAND = encrypt ]; then

  [ -n "$SOURCE" ] || _error "expected DIRECTORY argument"

  SOURCE_PATH="$(realpath "$SOURCE")"

  if [ -z "$TARGET" ]; then
    TARGET_PATH="$SOURCE_PATH.gpg"
    TARGET="$(realpath --relative-base . "$TARGET_PATH")"
  else
    TARGET_PATH="$(realpath "$TARGET")"
  fi

  if ! [ -d "$SOURCE_PATH" ]; then
    _error "not a directory: $SOURCE"
  elif [ -e "$TARGET_PATH" ]; then
    if [ -d "$TARGET_PATH" -o -z "$FORCE" ]; then
      _error "exists: $TARGET"
    else
      rm -f "$TARGET_PATH"
    fi
  fi

  _out -n "Encrypting $SOURCE..."
  (
    cd "$SOURCE_PATH"
    tar -c .
  ) | gpg --quiet --symmetric --output "$TARGET_PATH"
  _out

  VERIFY_PATH="$(mktemp -d -p "$(dirname "$TARGET_PATH")")"

  _out -n "Verifying..."
  gpg --quiet --decrypt "$TARGET_PATH" | (
    cd "$VERIFY_PATH"
    tar -x
  )

  diff -qr "$SOURCE_PATH" "$VERIFY_PATH" >/dev/null
  result=$?
  rm -rf "$VERIFY_PATH"

  if [ $result = 0 ]; then
    _out
  else
    _out "failed!"
    exit 1
  fi

  if [ -n "$REMOVE" ]; then
    _out -n "Removing $SOURCE..."
    rm -rf "$SOURCE_PATH"
    _out
  fi

  _out "Encrypted archive at: $TARGET"

else # decrypt

  [ -n "$SOURCE" ] || _error "expected FILE argument"

  SOURCE_PATH="$(realpath "$SOURCE")"

  if [ -z "$TARGET" ]; then
    TARGET_PATH="${SOURCE_PATH%.gpg}"
    [ "$TARGET_PATH" = "$SOURCE_PATH" ] && _error "indeterminate output directory"
    TARGET="$(realpath --relative-base . "$TARGET_PATH")"
  else
    TARGET_PATH="$(realpath "$TARGET")"
  fi

  if ! [ -f "$SOURCE_PATH" ]; then
    _error "not a file: $SOURCE"
  elif [ -e "$TARGET_PATH" ]; then
    if [ -z "$FORCE" ]; then
      _error "exists: $TARGET"
    elif ! [ -d "$TARGET_PATH" ]; then
      rm -f "$TARGET_PATH"
    fi
  fi

  _out -n "Decrypting $SOURCE..."
  gpg --quiet --decrypt "$SOURCE_PATH" | (
    mkdir -p "$TARGET_PATH"
    cd "$TARGET_PATH"
    tar -x
  )
  _out

  if [ -n "$REMOVE" ]; then
    _out -n "Removing $SOURCE..."
    rm -f "$SOURCE_PATH"
    _out
  fi

  _out "Decrypted directory at: $TARGET"

fi
