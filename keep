#!/bin/bash

set -euo pipefail

usage() {
  cat >&2 <<EOF
Usage: $0 [OPTIONS] encrypt DIRECTORY [FILE]
       $0 [OPTIONS] decrypt FILE [DIRECTORY]

Simple directory encryption using GnuPG --symmetric.

Optional arguments:
  -f, --force                Overwrite target file or directory
  -u, --remove               Remove the source after encryption/decryption
  -q, --quiet                Suppress output
  -x, --gpg-executable=PATH  Command or path to gpg binary (default: gpg)
  -h, --help                 This help text
EOF
}

_error() {
  echo >&2 "$@"
  echo >&2 "Try '$0 --help' for more information."
  exit 1
}

_gpg() {
  "$GPG_EXECUTABLE" "$@"
}

_is_termux() {
  test -f "$HOME/../usr/etc/termux-login.sh"
}

_out() {
  [ -n "$QUIET" ] || echo "$@"
}

_require_arg() {
  [ $# -ge 1 ] || _error "Missing argument to $1"
}

COMMAND=
SOURCE=
TARGET=
FORCE=
REMOVE=
QUIET=
GPG_EXECUTABLE=gpg

# Fix gpg-agent on termux during symmetric encryption
_is_termux && export GPG_TTY="$(tty)"

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  if [[ "$ARG" =~ ^(--[^=]+)=(.*)$ ]]; then
    set -- "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "$@"
  fi
  case "$ARG" in
  -f | --force)
    FORCE=1
    ;;
  -u | --remove)
    REMOVE=1
    ;;
  -q | --quiet)
    QUIET=1
    ;;
  -x | --gpg-executable)
    _require_arg "$@"
    GPG_EXECUTABLE="$1"
    shift
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -*)
    if [ ${#ARG} -gt 2 -a "${ARG:1:1}" != - ]; then
      i=$((${#ARG} - 1))
      while [ $i -ge 1 ]; do
        set -- "-${ARG:$i:1}" "$@"
        i=$((i - 1))
      done
    else
      _error "Unknown option '$ARG'"
    fi
    ;;
  *)
    if [ -n "$TARGET" ]; then
      _error "Unexpected argument '$ARG'"
    elif [ -n "$SOURCE" ]; then
      TARGET="$ARG"
    elif [ -n "$COMMAND" ]; then
      SOURCE="$ARG"
    else
      case "$ARG" in
      en*)
        COMMAND=encrypt
        ;;
      de*)
        COMMAND=decrypt
        ;;
      *)
        _error "Unknown command '$ARG'"
        ;;

      esac
    fi
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  _error "Expected 'encrypt' or 'decrypt' argument"
fi

if [ $COMMAND = encrypt ]; then

  [ -n "$SOURCE" ] || _error "Expected DIRECTORY argument"

  SOURCE_PATH="$(realpath "$SOURCE")"

  if [ -z "$TARGET" ]; then
    TARGET_PATH="$SOURCE_PATH.gpg"
    TARGET="$(realpath --relative-base . "$TARGET_PATH")"
  else
    TARGET_PATH="$(realpath "$TARGET")"
  fi

  if ! [ -d "$SOURCE_PATH" ]; then
    _error "Not a directory: $SOURCE"
  elif [ -e "$TARGET_PATH" ]; then
    if [ -d "$TARGET_PATH" -o -z "$FORCE" ]; then
      _error "Exists: $TARGET"
    else
      rm -f "$TARGET_PATH"
    fi
  fi

  _out -n "Encrypting $SOURCE..."
  (
    cd "$SOURCE_PATH"
    tar -c .
  ) | gpg --quiet --symmetric --output "$TARGET_PATH"
  _out

  VERIFY_PATH="$(mktemp -d -p "$(dirname "$TARGET_PATH")")"

  _out -n "Verifying..."
  gpg --quiet --decrypt "$TARGET_PATH" | (
    cd "$VERIFY_PATH"
    tar -x
  )

  diff -qr "$SOURCE_PATH" "$VERIFY_PATH" >/dev/null
  result=$?
  rm -rf "$VERIFY_PATH"

  if [ $result = 0 ]; then
    _out
  else
    _out "failed!"
    exit 1
  fi

  if [ -n "$REMOVE" ]; then
    _out -n "Removing $SOURCE..."
    rm -rf "$SOURCE_PATH"
    _out
  fi

  _out "Encrypted archive at: $TARGET"

else # decrypt

  [ -n "$SOURCE" ] || _error "Expected FILE argument"

  SOURCE_PATH="$(realpath "$SOURCE")"

  if [ -z "$TARGET" ]; then
    TARGET_PATH="${SOURCE_PATH%.gpg}"
    [ "$TARGET_PATH" = "$SOURCE_PATH" ] && _error "Indeterminate output directory"
    TARGET="$(realpath --relative-base . "$TARGET_PATH")"
  else
    TARGET_PATH="$(realpath "$TARGET")"
  fi

  if ! [ -f "$SOURCE_PATH" ]; then
    _error "Not a file: $SOURCE"
  elif [ -e "$TARGET_PATH" ]; then
    if [ -z "$FORCE" ]; then
      _error "Exists: $TARGET"
    elif ! [ -d "$TARGET_PATH" ]; then
      rm -f "$TARGET_PATH"
    fi
  fi

  _out -n "Decrypting $SOURCE..."
  gpg --quiet --decrypt "$SOURCE_PATH" | (
    mkdir -p "$TARGET_PATH"
    cd "$TARGET_PATH"
    tar -x
  )
  _out

  if [ -n "$REMOVE" ]; then
    _out -n "Removing $SOURCE..."
    rm -f "$SOURCE_PATH"
    _out
  fi

  _out "Decrypted directory at: $TARGET"

fi
